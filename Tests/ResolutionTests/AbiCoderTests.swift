//
//  AbiCoderTests.swift
//  resolutionTests
//
//  Created by Johnny Good on 8/26/20.
//  Copyright Â© 2020 Johnny Good. All rights reserved.
//

import Foundation
import XCTest

@testable import Resolution

class AbiCoderTestCases: XCTestCase {
    enum AbiTestNames {
        case addressTest;
        case uint256Test;
        case stringTest;
        case stringArrayTest;
    }
    
    func testAbiAddress() throws {
        let address: String = "0xb66DcE2DA6afAAa98F2013446dBCB0f4B0ab2842";
        let coder: ABICoder = self.makeCoder(coding: .addressTest);
        let encoded = try coder.encode(method: "addressTest", args: [address]);
        assert(encoded.prefix(10) == "0xac59c960"); // check the function selector
        assert(encoded == "0xac59c960000000000000000000000000b66DcE2DA6afAAa98F2013446dBCB0f4B0ab2842");
    }
    
    func testUint256() throws {
        let uint = [String(69, radix:16), String(17, radix: 16), String(45, radix:16)];
        let answers = [
            "0x89f6e9120000000000000000000000000000000000000000000000000000000000000045",
            "0x89f6e9120000000000000000000000000000000000000000000000000000000000000011",
            "0x89f6e912000000000000000000000000000000000000000000000000000000000000002d"
        ];
        let coder: ABICoder = self.makeCoder(coding: .uint256Test);
        let encoded = try uint.map({try coder.encode(method: "uint256Test", args: [$0] )});
        for (index, item) in encoded.enumerated() {
            assert(item == answers[index]);
        }
    }
    
    func testString() throws {
        let testStrings = ["dave", "one", "two", "three"];
        let answers = [ "0x788e29f8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000046461766500000000000000000000000000000000000000000000000000000000",
            "0x788e29f8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000",
            "0x788e29f80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000374776f0000000000000000000000000000000000000000000000000000000000",
            "0x788e29f8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000"
        ];
        let coder: ABICoder = self.makeCoder(coding: .stringTest);
        let encoded = try testStrings.map( {try coder.encode(method: "stringTest", args: [$0]) } );
        for (index, item) in encoded.enumerated() {
            assert(item == answers[index]);
        }
    }
    
    func testArrayString() throws {
        let testSubjects: [[String]] = [
            ["one", "two", "three"],
            ["something", "funny"],
            ["want", "to", "go", "to", "Japan"]
        ];
        let answers: [String] = [
            "0x6a57db5300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000",
            "0x6a57db5300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000009736f6d657468696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000566756e6e79000000000000000000000000000000000000000000000000000000",
            "0x6a57db530000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000477616e74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002746f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002676f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002746f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054a6170616e000000000000000000000000000000000000000000000000000000"
        ];
        let coder: ABICoder = self.makeCoder(coding: .stringArrayTest);
        let encoded = try testSubjects.map({try coder.encode(method:"stringArrayTest", args: [$0])});
        for (index, item) in encoded.enumerated() {
            assert(item == answers[index]);
        }
    }
    
    private func makeCoder(coding testName: AbiTestNames) -> ABICoder {
        let abi: ABI = self.generateAbi(for: testName);
        return ABICoder(abi);
    }
    
    private func generateAbi(for testName: AbiTestNames) -> ABI {
        
        var inputs: [Put] = [];
        var outputs: [Put] = [];
        var name: String = "";
        
        switch testName {
        case .addressTest:
            inputs.append(Put(internalType: .address, name: "", type: .address, indexed: nil));
            outputs.append(Put(internalType: .address, name: "", type: .address, indexed: nil));
            name = "addressTest";
            break ;
        case .uint256Test:
            inputs.append(Put(internalType: .uint256, name: "", type: .uint256, indexed: nil));
            outputs.append(Put(internalType: .uint256, name: "", type: .uint256, indexed: nil));
            name = "uint256Test";
            break ;
        case .stringTest:
            inputs.append(Put(internalType: .string, name: "", type: .string, indexed: nil));
            outputs.append(Put(internalType: .string, name: "", type: .string, indexed: nil));
            name = "stringTest";
            break ;
        case .stringArrayTest:
            inputs.append(Put(internalType: .stringArray, name: "", type: .stringArray, indexed: nil));
            outputs.append(Put(internalType: .stringArray, name: "", type: .stringArray, indexed: nil));
            name = "stringArrayTest";
            break ;
        }
        
        return [ABIElement(
            constant: true,
            inputs: inputs,
            name: name,
            outputs: outputs,
            payable: nil,
            stateMutability: nil,
            type: .function,
            anonymous: nil)];
    }
}
